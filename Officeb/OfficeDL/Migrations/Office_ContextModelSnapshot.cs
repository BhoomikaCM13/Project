// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OfficeDL;

namespace OfficeDL.Migrations
{
    [DbContext(typeof(Office_Context))]
    partial class Office_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("OfficeEntity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PId")
                        .HasColumnType("int");

                    b.Property<int?>("TaskBoardId")
                        .HasColumnType("int");

                    b.Property<int>("taskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PId");

                    b.HasIndex("TaskBoardId");

                    b.HasIndex("taskId");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("OfficeEntity.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("GetMonthTask")
                        .HasColumnType("int");

                    b.Property<int>("GetMonthcomment")
                        .HasColumnType("int");

                    b.Property<int>("GetMonthmsg")
                        .HasColumnType("int");

                    b.Property<int>("GetTodayTask")
                        .HasColumnType("int");

                    b.Property<int>("GetTodaycomment")
                        .HasColumnType("int");

                    b.Property<int>("GetTodaymsg")
                        .HasColumnType("int");

                    b.Property<int>("GetYearTask")
                        .HasColumnType("int");

                    b.Property<int>("GetYearcomment")
                        .HasColumnType("int");

                    b.Property<int>("GetYearmsg")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("dashboards");
                });

            modelBuilder.Entity("OfficeEntity.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("OfficeEntity.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("profile");
                });

            modelBuilder.Entity("OfficeEntity.TaskBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("_comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("_taskId")
                        .HasColumnType("int");

                    b.Property<int?>("comment_Id")
                        .HasColumnType("int");

                    b.Property<int>("countMessage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("_taskId");

                    b.HasIndex("comment_Id");

                    b.ToTable("taskboards");
                });

            modelBuilder.Entity("OfficeEntity.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("tasks");
                });

            modelBuilder.Entity("OfficeEntity.Comment", b =>
                {
                    b.HasOne("OfficeEntity.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OfficeEntity.TaskBoard", null)
                        .WithMany("comments")
                        .HasForeignKey("TaskBoardId");

                    b.HasOne("OfficeEntity.Tasks", "task")
                        .WithMany()
                        .HasForeignKey("taskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("task");
                });

            modelBuilder.Entity("OfficeEntity.Message", b =>
                {
                    b.HasOne("OfficeEntity.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("PId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("OfficeEntity.TaskBoard", b =>
                {
                    b.HasOne("OfficeEntity.Tasks", "_task")
                        .WithMany()
                        .HasForeignKey("_taskId");

                    b.HasOne("OfficeEntity.Comment", "comment_")
                        .WithMany()
                        .HasForeignKey("comment_Id");

                    b.Navigation("_task");

                    b.Navigation("comment_");
                });

            modelBuilder.Entity("OfficeEntity.Tasks", b =>
                {
                    b.HasOne("OfficeEntity.Profile", "profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("profile");
                });

            modelBuilder.Entity("OfficeEntity.TaskBoard", b =>
                {
                    b.Navigation("comments");
                });
#pragma warning restore 612, 618
        }
    }
}
